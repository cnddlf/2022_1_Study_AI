{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"cats and dogs(0318)의 사본","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMUyP7UcNNqoGOVfB8KaHeJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BqsALa_RYZlM","executionInfo":{"status":"ok","timestamp":1647569109248,"user_tz":-540,"elapsed":2844,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"f9d1c42d-66b8-444a-b9a9-4707540c4cbd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["base_path='/content/drive/MyDrive/2022_1_Study_AI/data/cats_and_dogs/cats_and_dogs/data'\n","dir_lst=['test', 'train', 'validation']\n","inner_dir_lst=['cats', 'dogs']"],"metadata":{"id":"GpnxDDmGYnqP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","\n","os.listdir(base_path+'/'+dir_lst[0]+'/'+inner_dir_lst[0])"],"metadata":{"id":"32dTAhp9Y4FL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 위의 코드를 이용하여 각 디렉토리의 데이터의 개수를 다음과 같은 형식으로 출력하시오.\n","\n","> test cats 이미지 전체 개수 : 500\n","\n","> test dogs 이미지 전체 개수 : 500\n","\n","> train cats 이미지 전체 개수 : 1000\n","\n","> train dogs 이미지 전체 개수 : 1000\n","\n","> validation cats 이미지 전체 개수 : 500\n","\n","> validation dogs 이미지 전체 개수 : 500"],"metadata":{"id":"Ei15nKDDZdY9"}},{"cell_type":"code","source":["for dir_name in dir_lst:\n","  for inner_dir_name in inner_dir_lst:\n","    cnt = len(os.listdir(base_path+'/'+dir_name+'/'+inner_dir_name))\n","    print(dir_name, '/', inner_dir_name, '의 이미지 개수 : ', cnt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YQjYdos4ZVs1","executionInfo":{"status":"ok","timestamp":1647569120955,"user_tz":-540,"elapsed":576,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"12fe338c-3549-4316-b485-32c275c9a4d8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["test / cats 의 이미지 개수 :  500\n","test / dogs 의 이미지 개수 :  500\n","train / cats 의 이미지 개수 :  1000\n","train / dogs 의 이미지 개수 :  1000\n","validation / cats 의 이미지 개수 :  500\n","validation / dogs 의 이미지 개수 :  500\n"]}]},{"cell_type":"code","source":["# 모델 만들기\n","from keras import layers\n","from keras import models\n","\n","model = models.Sequential()\n","model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 1)))\n","model.add( layers.MaxPooling2D((2,2)))\n","model.add( layers.Conv2D(64, (3,3), activation='relu'))\n","model.add( layers.MaxPooling2D((2,2)))\n","model.add( layers.Conv2D(128, (3,3), activation='relu'))\n","model.add( layers.MaxPooling2D((2,2)))\n","model.add( layers.Conv2D(128, (3,3), activation='relu'))\n","model.add( layers.MaxPooling2D((2,2)))\n","model.add( layers.Flatten())\n","model.add(layers.Dense(512, activation='relu'))\n","model.add( layers.Dense(1, activation='sigmoid'))"],"metadata":{"id":"RBs_6nohic64"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7eAfI_4ikEod","executionInfo":{"status":"ok","timestamp":1647569197692,"user_tz":-540,"elapsed":391,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"ad211820-abdd-4364-e670-55d8891c9843"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d_4 (Conv2D)           (None, 148, 148, 32)      320       \n","                                                                 \n"," max_pooling2d_4 (MaxPooling  (None, 74, 74, 32)       0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_5 (Conv2D)           (None, 72, 72, 64)        18496     \n","                                                                 \n"," max_pooling2d_5 (MaxPooling  (None, 36, 36, 64)       0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_6 (Conv2D)           (None, 34, 34, 128)       73856     \n","                                                                 \n"," max_pooling2d_6 (MaxPooling  (None, 17, 17, 128)      0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_7 (Conv2D)           (None, 15, 15, 128)       147584    \n","                                                                 \n"," max_pooling2d_7 (MaxPooling  (None, 7, 7, 128)        0         \n"," 2D)                                                             \n","                                                                 \n"," flatten_1 (Flatten)         (None, 6272)              0         \n","                                                                 \n"," dense_2 (Dense)             (None, 512)               3211776   \n","                                                                 \n"," dense_3 (Dense)             (None, 1)                 513       \n","                                                                 \n","=================================================================\n","Total params: 3,452,545\n","Trainable params: 3,452,545\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["from tensorflow.keras import optimizers\n","\n","model.compile(loss='binary_crossentropy', \n","               optimizer=optimizers.RMSprop(learning_rate=0.0001),\n","               metrics=['acc'])"],"metadata":{"id":"wCA3Tr2Il0Eb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 데이터 전처리\n","from keras.preprocessing.image import ImageDataGenerator\n","\n","# 모든 이미지를 1/255로 스케일을 조정한다.\n","# 이미지 pixel이 0~255까지 사용됨으로 이를 부동 소수로 변환하기 위해 rescale로 조정하는 것이다.\n","train_dataGen = ImageDataGenerator(rescale=1./255)\n","test_dataGen = ImageDataGenerator(rescale=1./255)"],"metadata":{"id":"NAMO6OSLoE67"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_dir = base_path+'/train'\n","\n","train_generator = train_dataGen.flow_from_directory(\n","    train_dir, target_size=(150, 150), batch_size=20, class_mode='binary'\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"11wgcNTcpL9S","executionInfo":{"status":"ok","timestamp":1647569203188,"user_tz":-540,"elapsed":2,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"010a825a-a2c1-4fa2-950b-a277bce2afaa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 2000 images belonging to 2 classes.\n"]}]},{"cell_type":"code","source":["validation_dir = base_path+'/validation'\n","\n","validation_generator = test_dataGen.flow_from_directory(\n","    validation_dir, target_size=(150, 150), batch_size=20, class_mode='binary'\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B94DDVtir5d1","executionInfo":{"status":"ok","timestamp":1647569205387,"user_tz":-540,"elapsed":555,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"9ac236df-62cf-49c9-a633-22352a551e49"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 1000 images belonging to 2 classes.\n"]}]},{"cell_type":"code","source":["for data_batch, labels_batch in train_generator:\n","  print(data_batch.shape, ' : ', labels_batch.shape)\n","  break"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C9ZEePY-sGyy","executionInfo":{"status":"ok","timestamp":1647569211613,"user_tz":-540,"elapsed":3964,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"297e908b-74fb-48b6-ce9c-3f5340c40936"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(20, 150, 150, 3)  :  (20,)\n"]}]},{"cell_type":"code","source":["import tensorflow as tf\n","\n","device_name = tf.test.gpu_device_name()\n","\n","if device_name != '/device:GPU:0':\n","  raise SystemError('GPU device not found')\n","\n","print('Found GPU at : ', device_name)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dn1ywNIrs6rL","executionInfo":{"status":"ok","timestamp":1647569213926,"user_tz":-540,"elapsed":381,"user":{"displayName":"이충일","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"14549651031576837673"}},"outputId":"020697b2-7552-4d73-b148-351561858bf7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found GPU at :  /device:GPU:0\n"]}]},{"cell_type":"code","source":["with tf.device('/device:GPU:0'):\n","  history = model.fit_generator(\n","      # 훈련 데이터로 이루어진 generator\n","      train_generator,\n","      # 한 epoch에서 사용할 step을 의미함.\n","      # 2000개의 데이터가 있고 20개의 배치사이즈를 설정했기 때문에 100step 지정\n","      steps_per_epoch=100,\n","      # 전체 훈련 데이터셋에 대해 학습할 반복 횟수\n","      epochs=30,\n","      # 검증할 데이터로 이루어진 generator\n","      validation_data= validation_generator,\n","      # 한 epoch 종료 시마다 검증할 step 수\n","      # 1000개의 데이터가 있고 20개의 배치 사이즈를 설정하였음으로 50 지정\n","      validation_steps=50)"],"metadata":{"id":"OfNktiUMtkSY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["with tf.device('/device:GPU:0'):\n","  history = model.fit_generator(\n","      train_generator, steps_per_epoch=100,\n","      epochs=30,\n","      validation_data=validation_generator,\n","      validation_steps=50\n","  )"],"metadata":{"id":"-Dq0O0c9xI6q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# acc = history.history['acc']\n","# val_acc = history.history['val_acc']\n","# loss = history.history['loss']\n","# val_loss = history.history['val_loss']\n","\n","acc = history.history['acc']\n","val_acc = history.history['val_acc']\n","\n","epochs = range(len(acc))\n","\n","plt.plot(epochs, acc, 'bo', label='Training acc')\n","plt.plot(epochs, val_acc, 'b', label='Validation acc')\n","plt.title('Training and validation accuracy')\n","plt.legend()\n","\n","plt.show()"],"metadata":{"id":"Lj0OiE4Bx5tg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(len(acc))\n","\n","plt.figure()\n","\n","plt.plot(epochs, loss, 'bo', label='Training loss')\n","plt.plot(epochs, val_loss, 'b', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.legend()\n","\n","plt.show()"],"metadata":{"id":"w3pzzr6lyn-1"},"execution_count":null,"outputs":[]}]}